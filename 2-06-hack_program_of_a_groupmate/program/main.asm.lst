     1                                  %include "../../2-05-printf/winapi.inc"
     1                              <1> STD_INPUT_HANDLE  equ -10
     2                              <1> STD_OUTPUT_HANDLE equ -11
     3                              <1> 
     4                              <1> INVALID_HANDLE_VALUE equ -1
     2                                  
     3                                  ; TODO: удалить отладочную информацию.
     4                                  
     5                                  global __start
     6                                  
     7                                  extern GetStdHandle
     8                                  extern ReadFile
     9                                  extern SetConsoleOutputCP
    10                                  extern GetProcessHeap
    11                                  extern HeapAlloc
    12                                  extern HeapFree
    13                                  extern ExitProcess
    14                                  
    15                                  extern myprintf
    16                                  extern mystrlen
    17                                  
    18                                  extern BCryptOpenAlgorithmProvider
    19                                  extern BCryptGetProperty
    20                                  extern BCryptCreateHash
    21                                  extern BCryptHashData
    22                                  extern BCryptFinishHash
    23                                  extern BCryptCloseAlgorithmProvider
    24                                  extern BCryptDestroyHash
    25                                  
    26                                  
    27                                  CODE_PAGE equ 65001
    28                                  
    29                                  section .text
    30                                  validate_handle:
    31 00000000 4883F8FF                		cmp rax, INVALID_HANDLE_VALUE
    32 00000004 4831C9                  		xor rcx, rcx
    33 00000007 4883EC20                		sub rsp, 32
    34 0000000B 0F84(00000000)          		je ExitProcess
    35 00000011 4883C420                		add rsp, 32
    36 00000015 C3                      		ret
    37                                  		
    38                                  section .text
    39                                  __start:
    40 00000016 B9E9FD0000              		mov rcx, CODE_PAGE
    41 0000001B 4883EC20                		sub rsp, 32
    42 0000001F E8(00000000)            		call SetConsoleOutputCP
    43 00000024 4883C420                		add rsp, 32
    44                                  		
    45 00000028 E874020000              		call main
    46                                  
    47 0000002D 4889C1                  		mov rcx, rax
    48 00000030 4883EC20                		sub rsp, 32
    49 00000034 E8(00000000)            		call ExitProcess
    50 00000039 4883C420                		add rsp, 32
    51                                  		
    52                                  section .text
    53                                  ; 0 -- undefined behaviour (it will fill all memory starting from rcx with dl.)
    54                                  mymemset:
    55 0000003D 57                      		push rdi
    56 0000003E 50                      		push rax
    57                                  
    58 0000003F 4889CF                  		mov rdi, rcx
    59 00000042 4889D0                  		mov rax, rdx
    60 00000045 4C89C1                  		mov rcx, r8
    61 00000048 F3AA                    		rep stosb
    62                                  		
    63 0000004A 58                      		pop rax
    64 0000004B 5F                      		pop rdi
    65 0000004C C3                      		ret
    66                                  
    67                                  section .text
    68                                  ; 0 -- undefined behaviour (it will fill all memory starting from rcx with dl.)
    69                                  mystrcmp:
    70 0000004D 57                      		push rdi
    71 0000004E 56                      		push rsi
    72                                  
    73 0000004F 51                      		push rcx
    74 00000050 52                      		push rdx
    75                                  		
    76 00000051 E8(00000000)            		call mystrlen
    77 00000056 4989C0                  		mov r8, rax
    78                                  		
    79 00000059 488B0C24                		mov rcx, [rsp]
    80 0000005D E8(00000000)            		call mystrlen
    81 00000062 4989C1                  		mov r9, rax
    82                                  		
    83 00000065 4D39C8                  		cmp r8, r9
    84 00000068 751E                    		jne .on_different_lengths
    85                                  		
    86 0000006A 4C89C1                  		mov rcx, r8
    87 0000006D 5F                      		pop rdi
    88 0000006E 5E                      		pop rsi
    89                                  
    90 0000006F F2AE                    		repne scasb
    91 00000071 48FFCE                  		dec rsi
    92 00000074 48FFCF                  		dec rdi
    93                                  		
    94 00000077 480FB60E                		movzx rcx, byte [rsi]
    95 0000007B 480FB617                		movzx rdx, byte [rdi]
    96 0000007F 4829D1                  		sub rcx, rdx
    97                                  		
    98 00000082 5E                      		pop rsi
    99 00000083 5F                      		pop rdi
   100                                  		
   101 00000084 4889C8                  		mov rax, rcx
   102 00000087 C3                      		ret
   103                                  		
   104                                  .on_different_lengths:
   105 00000088 4C89C0                  		mov rax, r8
   106 0000008B 4C29C8                  		sub rax, r9
   107                                  		
   108 0000008E 5E                      		pop rsi
   109 0000008F 5F                      		pop rdi
   110 00000090 C3                      		ret
   111                                  
   112                                  section .text
   113                                  create_sha512_hash:
   114 00000091 51                      		push rcx                      ; buffer address
   115 00000092 52                      		push rdx                      ; size of buffer
   116                                  
   117 00000093 4883EC20                		sub rsp, 32
   118 00000097 E8(00000000)            		call GetProcessHeap
   119 0000009C 4883C420                		add rsp, 32
   120                                  		
   121 000000A0 4885C0                  		test rax, rax
   122 000000A3 0F84EA010000            		jz .hashing_failed
   123                                  		
   124 000000A9 488905(00000000)        		mov [rel process_heap], rax
   125                                  
   126 000000B0 488D0D(08000000)        		lea rcx, [rel algo_handle]
   127 000000B7 488D15(00000000)        		lea rdx, [rel sha512_alg_prop]
   128 000000BE 4D31C0                  		xor r8, r8
   129 000000C1 4D31C9                  		xor r9, r9
   130 000000C4 4883EC20                		sub rsp, 32
   131 000000C8 E8(00000000)            		call BCryptOpenAlgorithmProvider
   132 000000CD 4883C420                		add rsp, 32
   133                                  		
   134 000000D1 4885C0                  		test rax, rax
   135 000000D4 0F88B9010000            		js .hashing_failed                ; failed if negative
   136                                  		
   137                                  		; Getting has object size
   138 000000DA 488B0D(08000000)        		mov rcx, [rel algo_handle]
   139 000000E1 488D15(06000000)        		lea rdx, [rel hash_object_size_prop]
   140 000000E8 4C8D05(18000000)        		lea r8, [rel hash_object_size]
   141 000000EF 41B908000000            		mov r9, 8
   142 000000F5 6A00                    		push 0
   143 000000F7 6A00                    		push 0
   144 000000F9 4883EC20                		sub rsp, 32
   145 000000FD E8(00000000)            		call BCryptGetProperty
   146 00000102 4883C420                		add rsp, 32
   147 00000106 4883C410                		add rsp, 16
   148                                  		
   149 0000010A 4885C0                  		test rax, rax
   150 0000010D 0F8880010000            		js .hashing_failed
   151                                  		
   152 00000113 488B0D(00000000)        		mov rcx, [rel process_heap]
   153 0000011A 4831D2                  		xor rdx, rdx
   154 0000011D 4C8B05(18000000)        		mov r8, [rel hash_object_size]
   155 00000124 4883EC20                		sub rsp, 32
   156 00000128 E8(00000000)            		call HeapAlloc
   157 0000012D 4883C420                		add rsp, 32
   158                                  		
   159 00000131 4885C0                  		test rax, rax
   160 00000134 0F8459010000            		jz .hashing_failed
   161                                  		
   162 0000013A 488905(2C000000)        		mov [rel hash_object_ptr], rax
   163                                  		
   164 00000141 488B0D(08000000)        		mov rcx, [rel algo_handle]
   165 00000148 488D15(12000000)        		lea rdx, [rel hash_len_prop]
   166 0000014F 4C8D05(20000000)        		lea r8, [rel hash_str_len]
   167 00000156 41B904000000            		mov r9, 4
   168 0000015C 6A00                    		push 0
   169 0000015E 6A00                    		push 0
   170 00000160 4883EC20                		sub rsp, 32
   171 00000164 E8(00000000)            		call BCryptGetProperty
   172 00000169 4883C420                		add rsp, 32
   173 0000016D 4883C410                		add rsp, 16
   174                                  		
   175 00000171 4885C0                  		test rax, rax
   176 00000174 0F8819010000            		js .hashing_failed
   177                                  		
   178 0000017A 813D(20000000)8000-     		cmp dword [rel hash_str_len], EXPECTED_HASH_LEN
   178 00000182 0000               
   179 00000184 0F8509010000            		jne .hashing_failed
   180                                  		
   181 0000018A 488B0D(00000000)        		mov rcx, [rel process_heap]
   182 00000191 4831D2                  		xor rdx, rdx
   183 00000194 4C8B05(20000000)        		mov r8, [rel hash_str_len]
   184 0000019B 4883EC20                		sub rsp, 32
   185 0000019F E8(00000000)            		call HeapAlloc
   186 000001A4 4883C420                		add rsp, 32
   187                                  		
   188 000001A8 4885C0                  		test rax, rax
   189 000001AB 0F84E2000000            		jz .hashing_failed
   190                                  		
   191 000001B1 488905(24000000)        		mov [rel hash_str_ptr], rax
   192                                  		
   193 000001B8 488B0D(08000000)        		mov rcx, [rel algo_handle]
   194 000001BF 488D15(10000000)        		lea rdx, [rel hashing_handle]
   195 000001C6 4C8B05(2C000000)        		mov r8, [rel hash_object_ptr]
   196 000001CD 4C8B0D(18000000)        		mov r9, [rel hash_object_size]
   197 000001D4 6A00                    		push 0
   198 000001D6 6A00                    		push 0
   199 000001D8 6A00                    		push 0
   200 000001DA 4883EC20                		sub rsp, 32
   201 000001DE E8(00000000)            		call BCryptCreateHash
   202 000001E3 4883C420                		add rsp, 32
   203 000001E7 4883C418                		add rsp, 24
   204                                  		
   205 000001EB 4885C0                  		test rax, rax
   206 000001EE 0F889F000000            		js .hashing_failed
   207                                  
   208 000001F4 488B0D(10000000)        		mov rcx, [rel hashing_handle]
   209 000001FB 488B542408              		mov rdx, [rsp+8]              ; address of the buffer
   210 00000200 4C8B0424                		mov r8, [rsp]                 ; size of the buffer
   211 00000204 4D31C9                  		xor r9, r9
   212 00000207 4883EC20                		sub rsp, 32
   213 0000020B E8(00000000)            		call BCryptHashData
   214 00000210 4883C420                		add rsp, 32
   215                                  		
   216 00000214 4885C0                  		test rax, rax
   217 00000217 787A                    		js .hashing_failed
   218                                  		
   219 00000219 488B0D(10000000)        		mov rcx, [rel hashing_handle]
   220 00000220 488B15(24000000)        		mov rdx, [rel hash_str_ptr]
   221 00000227 4C8B05(20000000)        		mov r8, [rel hash_str_len]
   222 0000022E 4D31C9                  		xor r9, r9
   223 00000231 4883EC20                		sub rsp, 32
   224 00000235 E8(00000000)            		call BCryptFinishHash
   225 0000023A 4883C420                		add rsp, 32
   226                                  		
   227 0000023E 4885C0                  		test rax, rax
   228 00000241 7850                    		js .hashing_failed
   229                                  		
   230                                  		
   231 00000243 488B0D(08000000)        		mov rcx, [rel algo_handle]
   232 0000024A 4883EC20                		sub rsp, 32
   233 0000024E E8(00000000)            		call BCryptCloseAlgorithmProvider
   234 00000253 4883C420                		add rsp, 32
   235                                  		
   236 00000257 488B0D(10000000)        		mov rcx, [rel hashing_handle]
   237 0000025E 4883EC20                		sub rsp, 32
   238 00000262 E8(00000000)            		call BCryptDestroyHash
   239 00000267 4883C420                		add rsp, 32
   240                                  		
   241 0000026B 488B0D(00000000)        		mov rcx, [rel process_heap]
   242 00000272 4831D2                  		xor rdx, rdx
   243 00000275 4C8B05(2C000000)        		mov r8, [rel hash_object_ptr]
   244 0000027C 4883EC20                		sub rsp, 32
   245 00000280 E8(00000000)            		call HeapFree
   246 00000285 4883C420                		add rsp, 32
   247                                  		
   248 00000289 488B05(2C000000)        		mov rax, [rel hash_object_ptr]
   249                                  
   250 00000290 5A                      		pop rdx
   251 00000291 59                      		pop rcx
   252 00000292 C3                      		ret
   253                                  		
   254                                  .hashing_failed:
   255 00000293 B801000000              		mov rax, 1
   256 00000298 4883EC20                		sub rsp, 32
   257 0000029C E8(00000000)            		call ExitProcess
   258                                  		
   259                                  section .bss
   260 00000000 <res 00000008>          process_heap: resq 1
   261 00000008 <res 00000008>          algo_handle: resq 1
   262 00000010 <res 00000008>          hashing_handle: resq 1
   263                                  
   264 00000018 <res 00000008>          hash_object_size: resq 1
   265 00000020 <res 00000004>          hash_str_len: resd 1
   266                                  
   267 00000024 <res 00000008>          hash_str_ptr: resq 1
   268 0000002C <res 00000008>          hash_object_ptr: resq 1
   269                                  
   270                                  section .rdata
   271 00000000 534841353132            sha512_alg_prop: dw "SHA512"
   272 00000006 4F626A6563744C656E-     hash_object_size_prop: dw "ObjectLength"
   272 0000000F 677468             
   273 00000012 486173684469676573-     hash_len_prop: dw "HashDigestLength"
   273 0000001B 744C656E677468     
   274                                  
   275                                  section .text
   276                                  main:
   277 000002A1 488D0D(22000000)        		lea rcx, [rel greeting_fmt]
   278 000002A8 4889E2                  		mov rdx, rsp
   279 000002AB 4883EC20                		sub rsp, 32
   280 000002AF E8(00000000)            		call myprintf
   281 000002B4 4883C420                		add rsp, 32
   282                                  		
   283 000002B8 48C7C1F6FFFFFF          		mov rcx, STD_INPUT_HANDLE
   284 000002BF 4883EC20                		sub rsp, 32
   285 000002C3 E8(00000000)            		call GetStdHandle
   286 000002C8 4883C420                		add rsp, 32
   287 000002CC 488905(34000000)        		mov [rel stdin_handle], rax
   288 000002D3 E828FDFFFF              		call validate_handle
   289                                  
   290 000002D8 4883EC08                		sub rsp, BUFFER_SIZE
   291 000002DC 488925(3C000000)        		mov [rel buffer_ptr], rsp
   292                                  		
   293 000002E3 488B0D(3C000000)        		mov rcx, [rel buffer_ptr]
   294 000002EA 30D2                    		xor dl, dl
   295 000002EC 41B808000000            		mov r8, BUFFER_SIZE
   296 000002F2 4883EC20                		sub rsp, 32
   297 000002F6 E842FDFFFF              		call mymemset
   298 000002FB 4883C420                		add rsp, 32
   299                                  		
   300 000002FF 488B0D(34000000)        		mov rcx, [rel stdin_handle]
   301 00000306 488B15(3C000000)        		mov rdx, [rel buffer_ptr]
   302 0000030D 41B80F000000            		mov r8, BUFFER_SIZE - 1 + BUFFER_OVERRUN
   303 00000313 4D31C9                  		xor r9, r9
   304 00000316 6A00                    		push 0
   305 00000318 4883EC20                		sub rsp, 32
   306 0000031C E8(00000000)            		call ReadFile
   307 00000321 4883C420                		add rsp, 32
   308 00000325 4883C408                		add rsp, 8
   309                                  		
   310                                  		;--------------------------------------------------------------------
   311                                  		; Returns length of a null terminated string.
   312                                  		;
   313                                  		; Entry: RCX - address of the start of the string
   314                                  		; Note:  max string length is 2^64 - 1.
   315                                  		; Exit:  RAX - length of the string
   316                                  		; Chngs: RAX RCX
   317                                  		;--------------------------------------------------------------------
   318                                  		; size_t strlen( const char * string );
   319 00000329 488B0D(3C000000)        		mov rcx, [rel buffer_ptr]
   320                                  		; sub rsp, 32  ; not needed for my strlen, as it is not used anyway.
   321 00000330 E8(00000000)            		call mystrlen
   322                                  		; add rsp, 32
   323                                  
   324 00000335 488B0D(3C000000)        		mov rcx, [rel buffer_ptr]
   325 0000033C 4889C2                  		mov rdx, rax
   326 0000033F E84DFDFFFF              		call create_sha512_hash
   327                                  		
   328 00000344 488B0D(76000000)        		mov rcx, [rel print_password_fmt]
   329 0000034B 4889C2                  		mov rdx, rax
   330 0000034E 4883EC20                		sub rsp, 32
   331 00000352 E8(00000000)            		call myprintf
   332 00000357 4883C420                		add rsp, 32
   333                                  		
   334 0000035B 4831C0                  		xor rax, rax
   335 0000035E 4883EC20                		sub rsp, 32
   336 00000362 E8(00000000)            		call ExitProcess
   337                                  		
   338 00000367 E8E1FCFFFF              		call mystrcmp
   339                                  		
   340 0000036C 488D0D(76000000)        		lea rcx, [rel print_password_fmt]
   341 00000373 488B15(3C000000)        		mov rdx, [rel buffer_ptr]
   342 0000037A 4883EC20                		sub rsp, 32
   343 0000037E E8(00000000)            		call myprintf
   344 00000383 4883C420                		add rsp, 32
   345                                  
   346 00000387 4883C408                		add rsp, BUFFER_SIZE
   347                                  
   348 0000038B 4831C0                  		xor rax, rax
   349 0000038E C3                      		ret
   350                                  
   351                                  section .bss
   352 00000034 <res 00000008>          stdin_handle: resq 1
   353                                  
   354                                  BUFFER_SIZE equ 8    ; Make sure it is devisible by 8.
   355                                  BUFFER_OVERRUN equ 8 ; Some overflow potential.
   356 0000003C <res 00000008>          buffer_ptr: resq 1
   357                                  
   358                                  EXPECTED_HASH_LEN equ 128
   359                                  
   360 00000044 <res 00000080>          buffer_hash: resb EXPECTED_HASH_LEN
   361                                  
   362                                  section .rdata
   363                                  ; Не %p, т.к. он не поддерживается моим printf.
   364 00000022 D09FD180D0B8D0B2D0-     greeting_fmt: db "Привет, 0x%016llx. Ты меня вызывал?", 0xA, 0
   364 0000002B B5D1822C2030782530-
   364 00000034 31366C6C782E20D0A2-
   364 0000003D D18B20D0BCD0B5D0BD-
   364 00000046 D18F20D0B2D18BD0B7-
   364 0000004F D18BD0B2D0B0D0BB3F-
   364 00000058 0A00               
   365 0000005A D094D0B02E20D09CD0-     password_prompt: db "Да. Мой пароль: ", 0
   365 00000063 BED0B920D0BFD0B0D1-
   365 0000006C 80D0BED0BBD18C3A20-
   365 00000075 00                 
   366 00000076 257300                  print_password_fmt: db "%s", 0
   367                                  ; sha512sum password.txt
   368 00000079 393763663165333564-     expected_hash: db "97cf1e35d3a728597ba441b4886c60cd7ce097843f4013f9f9ee1db6d800606ff8ac2fc8a9170708379b3017b4b9abce14222728c7691a0260197e54079caa13"
   368 00000082 336137323835393762-
   368 0000008B 613434316234383836-
   368 00000094 633630636437636530-
   368 0000009D 393738343366343031-
   368 000000A6 336639663965653164-
   368 000000AF 623664383030363036-
   368 000000B8 666638616332666338-
   368 000000C1 613931373037303833-
   368 000000CA 373962333031376234-
   368 000000D3 623961626365313432-
   368 000000DC 323237323863373639-
   368 000000E5 316130323630313937-
   368 000000EE 653534303739636161-
   368 000000F7 3133               
