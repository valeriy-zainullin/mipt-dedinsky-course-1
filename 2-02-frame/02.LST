Turbo Assembler	 Version 4.1	    02/21/22 13:40:23	    Page 1
02.asm



      1	0000			     .model tiny
      2
      3	0000			     .code
      4				     org 100h
      5
      6				     locals
      7
      8	      =B800		     VIDEO_SEG = 0b800h
      9
     10	      =07BA		     BORDER_VERT_PLAIN = 07bah
     11	      =07CD		     BORDER_HOR_PLAIN  = 07cdh
     12	      =07C9		     BORDER_TL_CORNER  = 07c9h
     13	      =07BB		     BORDER_TR_CORNER  = 07bbh
     14	      =07C8		     BORDER_BL_CORNER  = 07c8h
     15	      =07BC		     BORDER_BR_CORNER  = 07bch
     16	      =0700		     BACKGROUND	= 0700h
     17
     18	      =0700		     CHAR_COLOR	= 0700h
     19
     20	      =0019		     SCREEN_ROWS = 25d
     21	      =0050		     SCREEN_COLS = 80d
     22
     23	      =0017		     FRAME_ROWS	= SCREEN_ROWS -	2d
     24	      =004E		     FRAME_COLS	= SCREEN_COLS -	2d
     25
     26	0100			     start:
     27	0100  B8 B800				     mov ax, VIDEO_SEG
     28	0103  8E C0				     mov es, ax
     29
     30	0105  E8 0015				     call draw_frame
     31
     32	0108  BB 0000r				     mov bx, offset hello_string
     33	010B  E8 00B2				     call send_string
     34
     35	010E  BB 006Cr				     mov bx, offset second_string
     36	0111  E8 00AC				     call send_string
     37
     38	0114  32 E4				     xor ah, ah
     39	0116  CD 16				     int 16h
     40
     41	0118  B8 4C00				     mov ax, 4c00h			      ;	Выйти из программы и передать	    +
     42				     управление	DOSу
     43	011B  CD 21				     int 21h
     44
     45				     ;---------------------------------------------------------------
     46				     ; Draws frame
     47				     ;
     48				     ; Entry: None
     49				     ; Note:  None
     50				     ; Exit:  DF = 0
     51				     ; Destr: AX BX CX DX SI DI	ES DF
     52				     ;---------------------------------------------------------------
     53	011D			     draw_frame	proc
     54	011D  B8 B800				     mov ax, VIDEO_SEG
     55	0120  8E C0				     mov es, ax
     56	0122  BF 0000				     mov di, 0
     57
Turbo Assembler	 Version 4.1	    02/21/22 13:40:23	    Page 2
02.asm



     58	0125  BB 07C9				     mov bx, BORDER_TL_CORNER
     59	0128  B8 07CD				     mov ax, BORDER_HOR_PLAIN
     60	012B  BA 07BB				     mov dx, BORDER_TR_CORNER
     61	012E  B9 0050				     mov cx, SCREEN_COLS
     62	0131  E8 002A				     call draw_line
     63
     64	0134  BE 0001				     mov si, 1				; SI = current line index
     65	0137  BB 07BA				     mov bx, BORDER_VERT_PLAIN
     66	013A  B8 0700				     mov ax, BACKGROUND
     67	013D  BA 07BA				     mov dx, BORDER_VERT_PLAIN
     68	0140			     @@loop:
     69	0140  83 FE 18				     cmp si, SCREEN_ROWS - 1
     70	0143  74 09				     je	@@loop_end
     71
     72	0145  B9 0050				     mov cx, SCREEN_COLS
     73	0148  E8 0013				     call draw_line
     74
     75	014B  46				     inc si
     76	014C  EB F2				     jmp @@loop
     77	014E			     @@loop_end:
     78
     79	014E  BB 07C8				     mov bx, BORDER_BL_CORNER
     80	0151  B8 07CD				     mov ax, BORDER_HOR_PLAIN
     81	0154  BA 07BC				     mov dx, BORDER_BR_CORNER
     82	0157  B9 0050				     mov cx, SCREEN_COLS
     83	015A  E8 0001				     call draw_line
     84
     85	015D  C3				     ret
     86	015E			     endp
     87
     88				     ;---------------------------------------------------------------
     89				     ; Draws one line of a frame
     90				     ;
     91				     ; Entry: BX - first symbol
     92				     ;	      AX - middle symbol (that is repeated)
     93				     ;	      DX - last	symbol
     94				     ;	      CX - line	length (frame width)
     95				     ;	      DI - starting addr to draw
     96				     ; Note:  ES - videoseg addr
     97				     ; Exit:  DI - starting address of the next	line, CX = 0, DF = 0
     98				     ; Chngs: CX DI DF
     99				     ;---------------------------------------------------------------
    100	015E			     draw_line proc
    101	015E  FC				     cld
    102
    103	015F  93				     xchg bx, ax
    104	0160  AB				     stosw
    105	0161  93				     xchg bx, ax
    106	0162  49				     dec cx
    107
    108	0163  49				     dec cx	       ; need to loop line length - 2 times
    109	0164  F3> AB				     rep stosw
    110
    111	0166  92				     xchg dx, ax
    112	0167  AB				     stosw
    113	0168  92				     xchg dx, ax
    114
Turbo Assembler	 Version 4.1	    02/21/22 13:40:23	    Page 3
02.asm



    115	0169  C3				     ret
    116	016A			     endp
    117
    118				     ; TODO: DF	= 0, cld
    119
    120				     ;--------------------------------------------------------------------
    121				     ; Shifts line inside the frame to the left	for one	character.
    122				     ;
    123				     ; Entry: CX - length of the line inside the frame (# screen cols -	2)
    124				     ;	      DI - address of the first	character inside the frame on the line
    125				     ; Note:  DS, ES - videoseg	addr
    126				     ; Exit:  DI - address of the last character inside	the frame on the line
    127				     ;	      SI - address of the last frame border character on the line
    128				     ;	      CX = 0
    129				     ; Chngs: CX SI DI DF
    130				     ;--------------------------------------------------------------------
    131	016A			     shift_line	proc
    132	016A  FC				     cld
    133
    134	016B  8B F7				     mov si, di
    135	016D  83 C6 02				     add si, 2	       ; SI = address of the character after
    136								       ;      the current
    137	0170  49				     dec cx	       ; need to copy #	cols - 1 chars
    138
    139	0171  F3> A5				     rep movsw
    140
    141	0173  C3				     ret
    142	0174			     endp
    143
    144				     ;---------------------------------------------------------------
    145				     ; Shift chars inside the frame to make space for a	new one
    146				     ;
    147				     ; Entry: None
    148				     ; Note:  ES, DS - videoseg	addr
    149				     ; Exit:  CX = 0, DF = 0
    150				     ; Chngs: AX CX SI DI DF
    151				     ;---------------------------------------------------------------
    152	0174			     shift_chars proc
    153	0174  B8 0000				     mov ax, 0			   ; AX	= index	of the current
    154										   ;	  line inside the frame
    155	0177  BF 00A2				     mov di, 2d	* SCREEN_COLS +	2d ; DI	= address of the current
    156										   ;	  character in video memory
    157										   ; Initially of the first character
    158										   ; inside the	frame
    159	017A			     @@loop:
    160	017A  3D 0016				     cmp ax, FRAME_ROWS	- 1   ;	do unless it is	the last line inside the frame
    161	017D  74 10				     je	@@loop_end
    162
    163						     ; Shifts line inside the frame to the left	for one	character.
    164						     ;
    165						     ; Entry: CX - length of the line inside the frame (# screen cols -	2)
    166						     ;	      DI - address of the first	character inside the frame on the line
    167						     ; Note:  DS, ES - videoseg	addr
    168						     ; Exit:  DI - address of the last character inside	the frame on the line
    169						     ;	      SI - address of the last frame border character on the line
    170						     ;	      CX = 0
    171						     ; Chngs: CX SI DI
Turbo Assembler	 Version 4.1	    02/21/22 13:40:23	    Page 4
02.asm



    172	017F  B9 004E				     mov cx, FRAME_COLS
    173	0182  E8 FFE5				     call shift_line
    174
    175	0185  83 C6 04				     add si, 4d		      ;	point to the first character inside the	frame
    176									      ;	on the next line
    177
    178	0188  A5				     movsw		      ;	shift the last character of the	line
    179
    180	0189  83 C7 04				     add di, 4d		      ;	skip borders of	the frame
    181
    182	018C  40				     inc ax
    183	018D  EB EB				     jmp @@loop
    184	018F			     @@loop_end:
    185
    186	018F  B9 004E				     mov cx, FRAME_COLS
    187	0192  E8 FFD5				     call shift_line	      ;	shift the last line without filling the	last	    +
    188				     character
    189
    190	0195  C3				     ret
    191	0196			     endp
    192
    193				     ;---------------------------------------------------------------
    194				     ; TODO: update this doc.
    195				     ; Sends char to frame
    196				     ;
    197				     ; Entry: AL - character to	send
    198				     ; Note:  ES - videoseg addr
    199				     ; Exit:  None
    200				     ; Destr: CX
    201				     ;---------------------------------------------------------------
    202	0196			     send_char proc
    203	0196  83 3E 01BEr 4F			     cmp @@current_col,	SCREEN_COLS - 1
    204	019B  75 0F				     jne @@shift_chars_end
    205
    206	019D  FF 0E 01BEr			     dec @@current_col
    207
    208	01A1  50				     push ax
    209						     ; Shift chars inside the frame to make space for a	new one
    210						     ;
    211						     ; Entry:
    212						     ; Note:  ES, DS - videoseg	addr
    213						     ; Exit:  CX = 0
    214						     ; Chngs: AX CX SI DI
    215	01A2  1E				     push ds
    216	01A3  8C C0				     mov ax, es
    217	01A5  8E D8				     mov ds, ax
    218	01A7  E8 FFCA				     call shift_chars
    219	01AA  1F				     pop ds
    220	01AB  58				     pop ax
    221	01AC			     @@shift_chars_end:
    222
    223	01AC  8B 1E 01BEr			     mov bx, @@current_col
    224	01B0  D1 E3				     shl bx, 1
    225	01B2  26: 88 87	0E60			     mov es:[2d	* (SCREEN_ROWS - 2d) * SCREEN_COLS + bx], al
    226	01B7  D1 EB				     shr bx, 1
    227
    228	01B9  FF 06 01BEr			     inc @@current_col
Turbo Assembler	 Version 4.1	    02/21/22 13:40:23	    Page 5
02.asm



    229
    230	01BD  C3				     ret
    231
    232	01BE  0001		     @@current_col dw 1d
    233	01C0			     endp
    234
    235	01C0			     send_string proc
    236	01C0			     @@loop:
    237	01C0  8A 07				     mov al, [bx]
    238	01C2  3C 00				     cmp al, 0
    239	01C4  74 08				     je	@@loop_end
    240
    241	01C6  53				     push bx
    242	01C7  E8 FFCC				     call send_char
    243	01CA  5B				     pop bx
    244
    245	01CB  43				     inc bx
    246	01CC  EB F2				     jmp @@loop
    247	01CE			     @@loop_end:
    248	01CE  C3				     ret
    249	01CF			     endp
    250
    251	01CF			     .data
    252
    253	0000  46 6F 72 20 74 68	65+  hello_string db "For the End of the World spell, press Control-Alt-Delete.	Хочешь устроить	    +
    254	      20 45 6E 64 20 6F	66+  конец света? Нажми	кнопку ресет. ", 0
    255	      20 74 68 65 20 57	6F+
    256	      72 6C 64 20 73 70	65+
    257	      6C 6C 2C 20 70 72	65+
    258	      73 73 20 43 6F 6E	74+
    259	      72 6F 6C 2D 41 6C	74+
    260	      2D 44 65 6C 65 74	65+
    261	      2E 20 95 AE E7 A5	E8+
    262	      EC 20 E3 E1 E2 E0	AE+
    263	      A8 E2 EC 20 AA AE	AD+
    264	      A5 E6 20 E1 A2 A5	E2+
    265	      A0 3F 20 8D A0 A6	AC+
    266	      A8 20 AA AD AE AF	AA+
    267	      E3 20 E0 A5 E1 A5	E2+
    268	      2E 20 00
    269	006C  85 E1 AB A8 20 EF	20+  second_string db "Если я ядовитый,	то мне конец. Я	язык прикусил. Нажмите любую клавишу, чтобы +
    270	      EF A4 AE A2 A8 E2	EB+  продолжить...", 0
    271	      A9 2C 20 E2 AE 20	AC+
    272	      AD A5 20 AA AE AD	A5+
    273	      E6 2E 20 9F 20 EF	A7+
    274	      EB AA 20 AF E0 A8	AA+
    275	      E3 E1 A8 AB 2E 20	8D+
    276	      A0 A6 AC A8 E2 A5	20+
    277	      AB EE A1 E3 EE 20	AA+
    278	      AB A0 A2 A8 E8 E3	2C+
    279	      20 E7 E2 AE A1 EB	20+
    280	      AF E0 AE A4 AE AB	A6+
    281	      A8 E2 EC 2E 2E 2E	00
    282
    283				     end start
Turbo Assembler	 Version 4.1	    02/21/22 13:40:23	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/21/22"
??FILENAME			  Text	 "02	  "
??TIME				  Text	 "13:40:23"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CURRENT_COL			  Word	 DGROUP:01BE
@@LOOP				  Near	 DGROUP:0140
@@LOOP				  Near	 DGROUP:017A
@@LOOP				  Near	 DGROUP:01C0
@@LOOP_END			  Near	 DGROUP:014E
@@LOOP_END			  Near	 DGROUP:018F
@@LOOP_END			  Near	 DGROUP:01CE
@@SHIFT_CHARS_END		  Near	 DGROUP:01AC
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 02
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BACKGROUND			  Number 0700
BORDER_BL_CORNER		  Number 07C8
BORDER_BR_CORNER		  Number 07BC
BORDER_HOR_PLAIN		  Number 07CD
BORDER_TL_CORNER		  Number 07C9
BORDER_TR_CORNER		  Number 07BB
BORDER_VERT_PLAIN		  Number 07BA
CHAR_COLOR			  Number 0700
DRAW_FRAME			  Near	 DGROUP:011D
DRAW_LINE			  Near	 DGROUP:015E
FRAME_COLS			  Number 004E
FRAME_ROWS			  Number 0017
HELLO_STRING			  Byte	 DGROUP:0000
SCREEN_COLS			  Number 0050
SCREEN_ROWS			  Number 0019
SECOND_STRING			  Byte	 DGROUP:006C
SEND_CHAR			  Near	 DGROUP:0196
SEND_STRING			  Near	 DGROUP:01C0
SHIFT_CHARS			  Near	 DGROUP:0174
SHIFT_LINE			  Near	 DGROUP:016A
START				  Near	 DGROUP:0100
VIDEO_SEG			  Number B800

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  00C7 Word	  Public  DATA
  _TEXT				  16  01CF Word	  Public  CODE
